AWSTemplateFormatVersion: '2010-09-09'
Description: "AWS VPC + Linux bastion host + RDS PostgreSQL in Public Subnet (Combined Template), Do Not Remove Apache License Version 2.0"

Metadata:
  LICENSE: Apache License Version 2.0
  AWS::CloudFormation::Interface:
    ParameterGroups:
    - Label:
        default: Network configuration
      Parameters:
      - AvailabilityZones
      - VPCCIDR
      - PublicSubnet1CIDR
      - PublicSubnet2CIDR
      - PublicSubnet3CIDR
    - Label:
        default: Linux Bastion Host configuration
      Parameters:
       - EnableBastion
       - KeyPairName
       - RemoteAccessCIDR
    - Label:
        default: Database General configuration
      Parameters:
      - DBEngineVersion
      - DBInstanceClass
      - DBPort
      - DBName
      - DBMasterUsername
      - ManageMasterUserPassword
      - DBMasterUserPassword
      - DBMultiAZ
      - DBAutoMinorVersionUpgrade
      - DBBackupRetentionPeriod
    - Label:
        default: Database Storage configuration
      Parameters:
      - DBStorageType
      - DBAllocatedStorage
      - DBAllocatedStorageEncrypted

Parameters:
  # VPC Parameters
  AvailabilityZones:
    Description: List of Availability Zones to use for the subnets in the VPC
    Type: 'List<AWS::EC2::AvailabilityZone::Name>'
    Default: 'us-west-2a,us-west-2b,us-west-2c'
  
  VPCCIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.0.0/16
    Description: CIDR block for the VPC
    Type: String

  PublicSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.0.0/24
    Description: CIDR block for public subnet 1
    Type: String

  PublicSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.1.0/24
    Description: CIDR block for public subnet 2
    Type: String
    
  PublicSubnet3CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    Default: 10.0.2.0/24
    Description: CIDR block for public subnet 3
    Type: String

  # Bastion Parameters
  EnableBastion:
    AllowedValues: ["true", "false"]
    Default: "true"
    Description: If 'true', a bastion host will be created
    Type: String

  KeyPairName:
    Description: Name of an existing EC2 key pair for bastion host access
    Type: "AWS::EC2::KeyPair::KeyName"

  RemoteAccessCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$"
    Default: 10.0.0.0/16
    Description: Allowed CIDR block for external SSH access to bastion host
    Type: String

  # Database Parameters
  DBEngineVersion:
    Description: Select Database Engine Version
    Type: String
    Default: 16.9
    AllowedValues:
      - 14.12
      - 14.13
      - 14.15
      - 14.17
      - 14.18
      - 15.7
      - 15.8
      - 15.10
      - 15.12
      - 15.13
      - 16.3
      - 16.4
      - 16.6
      - 16.8
      - 16.9
      - 17.2
      - 17.4
      - 17.5

  DBInstanceClass:
    Default: db.r6i.large
    Description: Database instance class
    Type: String
    AllowedValues:
      - db.r6i.large
      - db.r6i.xlarge
      - db.r6i.2xlarge
      - db.r6i.4xlarge
      - db.r6i.8xlarge
      - db.r6i.12xlarge
      - db.r6i.16xlarge
      - db.r6i.24xlarge
      - db.r6i.32xlarge
      - db.t3.micro
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge

  DBAllocatedStorage:
    Default: 100
    Description: Allocated storage size in GiB
    Type: Number
    MinValue: 20
    MaxValue: 65536

  DBAllocatedStorageEncrypted:
    Default: "true"
    AllowedValues: ["true", "false"]
    Description: Whether to encrypt the database
    Type: String

  DBAutoMinorVersionUpgrade:
    AllowedValues: ["true", "false"]
    Default: "true"
    Description: Enable auto minor version upgrade
    Type: String

  DBBackupRetentionPeriod:
    Default: 7
    Description: Number of days for automatic database snapshots retention
    Type: Number
    MinValue: 0
    MaxValue: 35

  DBMasterUsername:
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    Default: postgres
    Description: Database master username
    MaxLength: "16"
    MinLength: "1"
    Type: String

  DBMasterUserPassword:
    AllowedPattern: ^(?=^.{8,255}$)(?=.*[a-z])(?=.*[A-Z])(?=.*\d)((?=.*[^A-Za-z0-9])(?!.*[@/"'])).*$
    ConstraintDescription: Min 8 chars. Must include 1 uppercase, 1 lowercase, 1 number, 1 symbol
    Description: Database master password
    MaxLength: "128"
    MinLength: "8"
    NoEcho: "True"
    Type: String

  ManageMasterUserPassword:
    AllowedValues: ["true", "false"]
    Default: "true"
    Description: Manage master password with AWS Secrets Manager
    Type: String

  DBMultiAZ:
    AllowedValues: ["true", "false"]
    Default: "false"
    Description: Deploy RDS Multi-AZ DB instance
    Type: String

  DBName:
    AllowedPattern: "[a-zA-Z0-9]*"
    Default: 'sampleapp'
    Description: Name of the initial PostgreSQL database
    MaxLength: "63"
    MinLength: "0"
    Type: String

  DBPort:
    Default: 5432
    Description: Database port
    Type: Number
    MinValue: 1150
    MaxValue: 65535

  DBStorageType:
    Default: gp3
    Description: EBS storage type for RDS PostgreSQL database
    Type: String
    AllowedValues: [gp2, gp3, io1]

Conditions:
  EnableBastionAccess: !Equals [!Ref EnableBastion, "true"]
  ManageMasterUserPassword: !Equals [!Ref ManageMasterUserPassword, "true"]

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-IGW"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet (AZ1)"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet (AZ2)"
          
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [2, !Ref AvailabilityZones]
      CidrBlock: !Ref PublicSubnet3CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Subnet (AZ3)"

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} Public Routes"

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
      
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3

  # Bastion Host IAM Role for SSM Session Manager
  BastionHostRole:
    Condition: EnableBastionAccess
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-BastionHostRole"

  # Instance Profile for Bastion Host
  BastionHostInstanceProfile:
    Condition: EnableBastionAccess
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionHostRole

  # Bastion Host Security Group
  BastionSecurityGroup:
    Condition: EnableBastionAccess
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref RemoteAccessCIDR
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS outbound for SSM
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP outbound for package updates
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: !Ref VPCCIDR
          Description: Database access
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-BastionSG"

  # Bastion Host
  BastionHost:
    Condition: EnableBastionAccess
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Sub '{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64}}'
      InstanceType: t3.small
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y amazon-ssm-agent postgresql15
          systemctl enable amazon-ssm-agent
          systemctl start amazon-ssm-agent
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-BastionHost"

  # RDS Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} DB Subnet Group"

  # RDS Security Group
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for RDS database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupId: !If [EnableBastionAccess, !Ref BastionSecurityGroup, !Ref "AWS::NoValue"]
          Description: Access from bastion host
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: !Ref VPCCIDR
          Description: Access from VPC (fallback when no bastion)
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-DatabaseSG"

  # RDS Instance
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-postgres"
      DBInstanceClass: !Ref DBInstanceClass
      Engine: postgres
      EngineVersion: !Ref DBEngineVersion
      MasterUsername: !Ref DBMasterUsername
      MasterUserPassword: !If [ManageMasterUserPassword, !Ref "AWS::NoValue", !Ref DBMasterUserPassword]
      ManageMasterUserPassword: !Ref ManageMasterUserPassword
      DBName: !Ref DBName
      Port: !Ref DBPort
      AllocatedStorage: !Ref DBAllocatedStorage
      StorageType: !Ref DBStorageType
      StorageEncrypted: !Ref DBAllocatedStorageEncrypted
      MultiAZ: !Ref DBMultiAZ
      AutoMinorVersionUpgrade: !Ref DBAutoMinorVersionUpgrade
      BackupRetentionPeriod: !Ref DBBackupRetentionPeriod
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      PubliclyAccessible: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName} PostgreSQL Database"

Outputs:
  VPC:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"

  DatabaseEndpoint:
    Description: RDS instance endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub "${AWS::StackName}-DatabaseEndpoint"

  DatabasePort:
    Description: RDS instance port
    Value: !GetAtt Database.Endpoint.Port
    Export:
      Name: !Sub "${AWS::StackName}-DatabasePort"

  BastionHostIP:
    Condition: EnableBastionAccess
    Description: Bastion Host Public IP
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-BastionIP"